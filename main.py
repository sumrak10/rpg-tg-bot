from posixpath import split
import requests, random, datetime, sys, time, argparse, os
from colorama import Fore, Back, Style
import telebot
from telebot.types import ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery

from bd_manage import *
import config

bot = telebot.TeleBot(config.token)

# –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï
personId = ""
personUname = ""
personName = ""
personAge = ""
personDes = ""
personMon = ""
personLoc = ""
personsId = []
trueSimInUname = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890_'
minUnameLen = 3

# –ª–æ–∫–∞—Ü–∏–∏
not_available_emoji = '‚ùå'
locationlist = []
clubopen = datetime.time(18, 0)
clubclose = datetime.time(6, 0)
schoolopen = datetime.time(8, 0)
schoolclose = datetime.time(20,0)

# –∫–∞–∑–∏–Ω–æ
kosti_sides = []
kosti_bet = 0
# —á–∞—Ç—ã
productsList = [[],[],[['–í–æ–¥–∞',3],['–ö–æ–ª–∞',5],['–ö–æ—Ñ–µ',5],['–®–∞—É—Ä–º–∞',8]],[['–í–æ–¥–∞',3],['–ö–æ–ª–∞',5],['–ö–æ—Ñ–µ',5],['–•–æ—Ç-–¥–æ–≥',10],['–ë—É—Ä–≥–µ—Ä',10],['–ß–∏–∑–±—É—Ä–≥–µ—Ä',12],['–õ–∞–≤–∞—à',15],['–°—É–ø –º—è—Å–Ω–æ–π',15],['–°—É–ø –æ–≤–æ—â–Ω–æ–π',13]],[['–í–æ–¥–∞',3],['–ö–æ–ª–∞',5],['–ö–æ—Ñ–µ',5],['–í–æ–¥–∫–∞',10],['–ü–∏–≤–æ',8],['–¢–µ–∫–∏–ª–∞',12],['–î–∂–∏–Ω',13],['–í–∏–Ω–æ',12]]]
businessList = [['–õ–∞–≤–∫–∞ —Å –º–æ—Ä–æ–∂–µ–Ω–Ω—ã–º',25],['–ú–æ–π–∫–∞ –º–∞—à–∏–Ω',50],['–ö–∞—Ñ–µ',500],['–†–µ—Å—Ç–æ—Ä–∞–Ω',1000],['–°–µ—Ç—å –º–∞–≥–∞–∑–∏–Ω–æ–≤',10000],['–ó–∞–≤–æ–¥ –º–∞—à–∏–Ω',100000],['–°–≤–æ—è –∫–æ–º–ø–∞–Ω–∏—è',500000],['–ú–æ–Ω–æ–ø–æ–ª–∏—è –∫–æ–º–ø–∞–Ω–∏–π',1000000]]
business_cost_factor = 75 # –≤–æ —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –±—É–¥–µ—Ç —Å–æ–æ—Ç–Ω–æ—Å–∏—Ç—å—Å—è ( –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –¥–æ—Ö–æ–¥ –æ—Ç –±–∏–∑–Ω–µ—Å–∞ : —Ü–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏ –±–∏–∑–Ω–µ—Å–∞ )
gardenList = [["üçÖ",1,2,4],["üßÖ",1,5,10],["ü•í",1,10,20],["ü•¨",3,15,25],["ü•ï",5,20,30],["üçÜ",5,30,50],["üåΩ",10,45,70],["üßÑ",10,50,80],["üçì",10,60,90],["ü•î",10,70,95],["üçâ",20,90,160],["üçá",20,100,180],["üçé",30,150,280],["üçê",30,200,380],["üçë",30,500,950]]
decay_factor = -3 # —á–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π —Å–æ–∑—Ä–µ–≤—à–∏–π —É—Ä–æ–∂–∞–π —Å–≥–Ω–∏–µ—Ç
min_koef_sell_harvest = 0.75 # –Ω–∞ —Å–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç –º–Ω–æ–∂–∏—Ç—å—Å—è —Ä—ã–Ω–æ—á–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥)
max_koef_sell_harvest = 1.25 # (–º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ - —Å–æ–æ—Ç–≤–µ—Ç—Å–≤–µ–Ω–Ω–æ)
# /–ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï


# –ì–õ–û–ë–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
def getProductsList(productsList):
    products = ''
    for product,price in productsList:
        products += product+' - '+str(price)+'\n'
    return products
def getProductsPrice(productsList,product):
    price = 0
    for i in productsList:
        if product.lower() == i[0].lower():
            price = i[1]
    return price
def updateGlobalVars(uid):
    global personId,personUname,personName,personAge,personDes,personMon,personLoc
    data = get_data_from_bd_by_id(uid)
    if data == 0:
        bot.send_message(uid, '–í–≤–µ–¥–∏ /start')
        return 0
    personId = data[0]
    personUname = data[1]
    personName = data[2]
    personAge = data[3]
    personDes = data[4]
    personMon = data[5]
    personLoc = data[6]
def date_to_string(date):
    return str(date.strftime('%d/%m/%Y'))
def string_to_date(str):
    d,m,y = str.split('/')
    return datetime.date(int(y),int(m),int(d))
def remake_garden(garden,cell,planttype=0, harvest=False):
    garden = garden.split()
    newgarden = ''
    if harvest == False:
        for i in range(len(garden)):
            if int(i) == int(cell): 
                newplant = str(planttype) +'-'+ date_to_string(datetime.datetime.now().date())
                newgarden += newplant + ' '
            else:
                newgarden += garden[i] + ' '
    else:
        for i in range(len(garden)):
            if int(i) == int(cell): 
                newplant = '0-0'
                newgarden += newplant + ' '
            else:
                newgarden += garden[i] + ' '
    return newgarden
# /–ì–õ–û–ë–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò

# –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø
@bot.message_handler(commands=['start'])
def start(message):
    global personId
    personId = message.from_user.id
    startdata = message.text[7:]
    if startdata.split('-')[0] == 'viewPerson':
        bot.delete_message(personId, message.message_id)
        viewPerson(startdata.split('-')[1], personId)
    else:
        personData = get_data_from_bd_by_id(message.from_user.id)
        # bot.reply_to(message, "–ü—Ä–∏–≤–µ—Ç —è –∫–∞–∂–µ—Ç—Å—è —Ç–µ–±—è –ø–æ–º–Ω—é. \n–ù–∞–ø–∏—à–∏ /game —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä–∞—Ç—å!")
        # mainMenu(message)
        if personData == 0:
            markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
            markup.add('–ü—Ä–∏–≤–µ—Ç! –Ø —Ö–æ—á—É —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞!')
            msg = bot.send_message(message.from_user.id, "–ü—Ä–∏–≤–µ—Ç! \n–Ø –≤–∏–∂—É —Ç—ã –Ω–æ–≤–µ–Ω—å–∫–∏–π, –±–µ–≥–æ–º —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ :)", reply_markup=markup)	
            bot.register_next_step_handler(msg, createPerson)
def createPerson(message):
    msg = bot.send_message(message.from_user.id, '–ö–∞–∫ —Ç–µ–±—è –±—É–¥—É—Ç –∑–≤–∞—Ç—å? :)')
    bot.register_next_step_handler(msg, setPersonName)
def setPersonName(message):
    global personName
    personName = message.text
    msg = bot.send_message(message.from_user.id, '–ü—Ä–∏–¥—É–º–∞–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä\n–û–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞ a-z –∏ —Ü–∏—Ñ—Ä—ã 0-9 —Ç–∞–∫ –∂–µ –Ω–∏–∂–Ω–∏–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è\n–î–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –±–æ–ª–µ–µ '+str(minUnameLen)+'—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ –Ω–µ –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å —Ü–∏—Ñ—Ä—ã\n(–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–∞–∫–æ–π –∂–µ username –∫–∞–∫ –∏ —É —Ç–≤–æ–µ–≥–æ —Ç–µ–ª–µ–≥—Ä–∞–º –∞–∫–∫–∞—É–Ω—Ç–∞)')
    bot.register_next_step_handler(msg, setPersonUname)
def setPersonUname(message):
    global personUname
    unameStatus = True
    personUname = message.text
    for sim in personUname:
        if not(sim in trueSimInUname):
            unameStatus = False
    if sim[0] in '1234567890':
        unameStatus = False
    data = get_data_from_bd_by_uname(personUname)
    if ( data != 0 ) or ( unameStatus ):
        msg = bot.send_message(message.from_user.id, '–£–≤—ã, —Ç–∞–∫–æ–π username –∑–∞–Ω—è—Ç, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ :(')
        bot.register_next_step_handler(msg, setPersonUname)
    if ( data == 0 ) or ( unameStatus ):
        msg = bot.send_message(message.from_user.id, '–ê —Ç–µ–ø–µ—Ä—å –ø—Ä–∏–¥—É–º–∞–µ–º –≤–æ–∑—Ä–∞—Å—Ç, '+personName+' :)')
        bot.register_next_step_handler(msg, setPersonAge)
def setPersonAge(message):
    global personAge
    try:
        personAge = int(message.text)
        if 0 <= personAge <= 120:
            msg = bot.send_message(message.from_user.id, "–ê –µ—Å–ª–∏ —Å–µ—Ä—å–µ–∑–Ω–æ? :(")
            bot.register_next_step_handler(msg, setPersonAge)
        msg = bot.send_message(message.from_user.id, "–ü—Ä–∏–¥—É–º–∞–π –æ–ø–∏—Å–∞–Ω–∏–µ —Å–≤–æ–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞\n (–¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –±–æ–ª–µ–µ 255 —Å–∏–º–≤–æ–ª–æ–≤. –£—á—Ç–∏ —ç—Ç–æ!)")
        bot.register_next_step_handler(msg, initPerson)
    except:
        msg = bot.send_message(message.from_user.id, "–ú–Ω–µ –Ω—É–∂–Ω—ã —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã (–±–µ–∑ –ª–∏—à–Ω–∏—Ö —Å–ª–æ–≤ –∏ –±—É–∫–≤) :(")
        bot.register_next_step_handler(msg, setPersonAge)
def initPerson(message):
    global personDes
    personDes = message.text
    if (insert_data_to_bd(personId,personUname,personName,personAge,personDes,100,0)):\
        bot.reply_to(message, "–û—Ç–ª–∏—á–Ω–æ, –ø–µ—Ä—Å–æ–Ω–∞–∂ —Å–æ–∑–¥–∞–Ω! –ù–∞–ø–∏—à–∏—Ç–µ /game —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä–∞—Ç—å!")
    else:
        bot.reply_to(message, "–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞! –ù–∞–ø–∏—à–∏—Ç–µ /start —á—Ç–æ–±—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑!")
# /–†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø


# –ö–õ–ê–í–ò–ê–¢–£–†–´
def mainMenu_kb():
	markup = ReplyKeyboardMarkup(resize_keyboard=True)
	markup.add('–ü—Ä–æ—Ñ–∏–ª—åüë§','–õ–æ–∫–∞—Ü–∏–∏üìç', '–ü–∞–Ω–µ–ª—å –∑–∞—Ä–∞–±–æ—Ç–∫–∞üßÆ')
	return markup
def chat_kb():
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('!–ø–æ–º–æ—â—å', '!–ª–æ–∫–∞—Ü–∏–∏','!–º–µ–Ω—é')
    return markup
def relationShip_kb(id,uid):
    friends, enemies = get_friends_and_enemies_list(id)
    markup = telebot.types.InlineKeyboardMarkup()
    if uid in friends:
        markup.add(telebot.types.InlineKeyboardButton(text = '–£–¥–∞–ª–∏—Ç—å –∏–∑ –¥—Ä—É–∑–µ–π', callback_data ='relationship delfriend '+uid))
    elif not(uid in enemies):
        markup.add(telebot.types.InlineKeyboardButton(text = '–î–æ–±–∞–≤–∏—Ç—å –≤ –¥—Ä—É–∑—å—è', callback_data ='relationship addfriend '+uid))
    if (uid in enemies):
        markup.add(telebot.types.InlineKeyboardButton(text = '–£–±—Ä–∞—Ç—å –∏–∑ –ß–°', callback_data ='relationship delenemy '+uid))
    elif not(uid in friends):
        markup.add(telebot.types.InlineKeyboardButton(text = '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –ß–°', callback_data ='relationship addenemy '+uid))
    return markup
def casinoMonetkaBet_kb():
    markup = telebot.types.InlineKeyboardMarkup()
    markup.add(telebot.types.InlineKeyboardButton(text = '50', callback_data ='casino monetka bet 50'))
    markup.add(telebot.types.InlineKeyboardButton(text = '100', callback_data ='casino monetka bet 100'))
    markup.add(telebot.types.InlineKeyboardButton(text = '500', callback_data ='casino monetka bet 500'))
    markup.add(telebot.types.InlineKeyboardButton(text = '1000', callback_data ='casino monetka bet 1000'))
    return markup
def casinoMonetkaSide_kb(bet):
    markup = telebot.types.InlineKeyboardMarkup()
    markup.add(telebot.types.InlineKeyboardButton(text = '–û—Ä—ë–ª', callback_data ='casino monetka '+str(bet)+' orel'))
    markup.add(telebot.types.InlineKeyboardButton(text = '–†–µ—à–∫–∞', callback_data ='casino monetka '+str(bet)+' reshka'))
    return markup
def casinoKostiBet_kb():
    markup = telebot.types.InlineKeyboardMarkup()
    markup.add(telebot.types.InlineKeyboardButton(text = '50', callback_data ='casino kosti bet 50'))
    markup.add(telebot.types.InlineKeyboardButton(text = '100', callback_data ='casino kosti bet 100'))
    markup.add(telebot.types.InlineKeyboardButton(text = '500', callback_data ='casino kosti bet 500'))
    markup.add(telebot.types.InlineKeyboardButton(text = '1000', callback_data ='casino kosti bet 1000'))
    return markup
def casinoKostiSide_kb():
    markup = telebot.types.InlineKeyboardMarkup()
    markup.add(telebot.types.InlineKeyboardButton(text = '1', callback_data ='casino kosti side 1'),telebot.types.InlineKeyboardButton(text = '2', callback_data ='casino kosti side 2'),telebot.types.InlineKeyboardButton(text = '3', callback_data ='casino kosti side 3'))
    markup.add(telebot.types.InlineKeyboardButton(text = '4', callback_data ='casino kosti side 4'),telebot.types.InlineKeyboardButton(text = '5', callback_data ='casino kosti side 5'),telebot.types.InlineKeyboardButton(text = '6', callback_data ='casino kosti side 6'))
    markup.add(telebot.types.InlineKeyboardButton(text = '–ì–æ—Ç–æ–≤–æ', callback_data ='casino kosti ok'))
    return markup
def everydayPrize_kb():
    markup = telebot.types.InlineKeyboardMarkup()
    markup.add(telebot.types.InlineKeyboardButton(text = '–ó–∞–±—Ä–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø—Ä–∏–∑!', callback_data ='management prize'))
    return markup
def management_kb():
    markup = telebot.types.InlineKeyboardMarkup()
    markup.add(telebot.types.InlineKeyboardButton(text = '–ö—É–ø–∏—Ç—å –±–∏–∑–Ω–µ—Å', callback_data ='management get business'))
    markup.add(telebot.types.InlineKeyboardButton(text = '–ó–∞–±—Ä–∞—Ç—å –∑–∞—Ä–∞–±–æ—Ç–æ–∫', callback_data ='management get income'))
    return markup
def management_buy_kb():
    markup = telebot.types.InlineKeyboardMarkup()
    markup.add(telebot.types.InlineKeyboardButton(text = '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data ='management buy back'))
    for i in businessList:
        markup.add(telebot.types.InlineKeyboardButton(text = i[0]+' –¶–µ–Ω–∞: '+str(int(i[1])*business_cost_factor)+' –î–æ—Ö–æ–¥: '+str(i[1]), callback_data ='management buy '+str(i[1])))
    return markup
def garden_kb(garden):
    markup = telebot.types.InlineKeyboardMarkup()
    garden = garden.split()
    garray = []
    garray3 = []
    k = 0
    for i in range(5):
        for j in range(3):
            if str(garden[k].split('-')[0]) == '0':
                txt = '–ü–æ—Å–∞–¥–∏—Ç—å'
                clbdata = 'plant ' + str(k)
            else:
                ddelta = datetime.datetime.now().date() - string_to_date(garden[k].split('-')[1])
                days = int(gardenList[int(garden[k].split('-')[0])-1][1]) - int(ddelta.days)
                if decay_factor <= days <= 0:
                    txt = gardenList[int(garden[k].split('-')[0])-1][0] + ' –°–æ–±—Ä–∞—Ç—å'
                    clbdata = 'harvest ' + str(k) + ' ' + str(garden[k].split('-')[0])
                elif days < decay_factor:
                    txt = gardenList[int(garden[k].split('-')[0])-1][0] + ' –£–±—Ä–∞—Ç—å'
                    clbdata = 'clean ' + str(k)
                else:
                    txt = gardenList[int(garden[k].split('-')[0])-1][0] + ' '+str(days) + ' –¥–Ω–µ–π'
                    clbdata = 'manage ' + str(k)+ ' ' +str(garden[k].split('-')[0])
            garray3.append([txt, clbdata])
            k += 1
        garray.append(garray3)
        garray3 = []
    markup.add(telebot.types.InlineKeyboardButton(text = '–ü–æ–ª–∏—Ç—å', callback_data ='garden water 0'))
    for i in range(5):
        markup.add(telebot.types.InlineKeyboardButton(text = garray[i][0][0], callback_data ='garden '+garray[i][0][1]),telebot.types.InlineKeyboardButton(text = garray[i][1][0], callback_data ='garden '+garray[i][1][1]),telebot.types.InlineKeyboardButton(text = garray[i][2][0], callback_data ='garden '+garray[i][2][1]))
    return markup
def garden_plant_kb(cell):
    markup = telebot.types.InlineKeyboardMarkup()
    markup.add(telebot.types.InlineKeyboardButton(text = '–û—Ç–º–µ–Ω–∏—Ç—å', callback_data ='garden buy back'))
    for i in range(len(gardenList)):
        markup.add(telebot.types.InlineKeyboardButton(text = '[ '+gardenList[i][0]+' ] –¶–µ–Ω–∞ —Å–µ–º—è–Ω: '+str(gardenList[i][2])+' –í—Ä–µ–º—è —Ä–æ—Å—Ç–∞: '+str(gardenList[i][1])+'\n', callback_data ='garden buy '+str(cell)+' '+str(int(i)+1)))
    return markup
def garden_manage_kb(cell):
    markup = telebot.types.InlineKeyboardMarkup()
    markup.add(telebot.types.InlineKeyboardButton(text = '–ù–∞–∑–∞–¥', callback_data ='garden buy back'))
    markup.add(telebot.types.InlineKeyboardButton(text = '–£–±—Ä–∞—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏–µ', callback_data ='garden clean '+str(cell)))
    return markup
# /–ö–õ–ê–í–ò–ê–¢–£–†–´




# –ö–û–õ–ë–ï–ö–ò
@bot.callback_query_handler(func=lambda call: True)
def callbackHandler(call):
    if call.data.split()[0] == 'garden':
        func = call.data.split()[1]
        cell = call.data.split()[2]
        data = get_data_from_bd_by_id(call.message.chat.id)
        gdata = get_data_from_gardening(call.message.chat.id)
        if func == 'plant':
            bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id,reply_markup=garden_plant_kb(cell))
        if func == 'buy':
            if cell == 'back':
                bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id,reply_markup=garden_kb(gdata[1]))
            else:
                plantprice = gardenList[int(call.data.split()[3])-1][2]
                if data[5] >= plantprice:
                    planttype = call.data.split()[3]
                    newg =  remake_garden(gdata[1],cell,planttype)
                    update_garden(call.message.chat.id, newg)
                    update_mon_bd_by_id(call.message.chat.id,str(int(data[5])-plantprice))
                    bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id,reply_markup=garden_kb(newg))
                else:
                    bot.answer_callback_query(callback_query_id=call.id, text="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å–µ–º—è–Ω! –í–∞—à –±–∞–ª–∞–Ω—Å: "+str(data[5]), show_alert=True)
        if func == 'harvest':
            plantnum = int(call.data.split()[3])
            plantprice = int(gardenList[plantnum-1][3])
            sellprice = random.randint(round(min_koef_sell_harvest*plantprice), round(max_koef_sell_harvest*plantprice))
            update_mon_bd_by_id(call.message.chat.id, str(int(data[5])+int(sellprice)))
            newg = remake_garden(gdata[1],cell,harvest=True)
            update_garden(call.message.chat.id, newg)
            bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id,reply_markup=garden_kb(newg))
            bot.answer_callback_query(callback_query_id=call.id, text="–£—Ä–æ–∂–∞–π —Å–æ–±—Ä–∞–Ω –∏ –ø—Ä–æ–¥–∞–Ω –∑–∞: "+str(sellprice)+' RPCoin', show_alert=False)
        if func == 'clean':
            newg = remake_garden(gdata[1],cell,harvest=True)
            update_garden(call.message.chat.id, newg)
            bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id,reply_markup=garden_kb(newg))
            bot.answer_callback_query(callback_query_id=call.id, text="–†–∞—Å—Ç–µ–Ω–∏–µ —É–±—Ä–∞–Ω–æ!", show_alert=False)
        if func == 'water':
            if str(gdata[2]) == date_to_string(datetime.datetime.now().date()):
                bot.answer_callback_query(callback_query_id=call.id, text="–í—ã —É–∂–µ –ø–æ–ª–∏–≤–∞–ª–∏ —É—Ä–æ–∂–∞–π —Å–µ–≥–æ–¥–Ω—è!", show_alert=True)
            else:
                update_last_watering_date(call.message.chat.id, date_to_string(datetime.datetime.now().date()))
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ–ª–∏–≤: '+date_to_string(datetime.datetime.now().date()),reply_markup=garden_kb(gdata[1]))
        if func == 'manage':
            bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id,reply_markup=garden_manage_kb(cell))


    if call.data.split()[0] == 'relationship':
        func = call.data.split()[1]
        uid = call.data.split()[2]
        me = call.message.chat.id
        if func == 'addfriend':
            status = add_friend(me,uid)
            if status == 200:
                bot.answer_callback_query(callback_query_id=call.id, text="–î—Ä—É–≥ –¥–æ–±–∞–≤–ª–µ–Ω", show_alert=False)
            bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id,reply_markup=relationShip_kb(me,uid))
        elif func == 'addenemy':
            status = add_enemy(me,uid)
            if status == 300:
                bot.answer_callback_query(callback_query_id=call.id, text="–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –ß–°", show_alert=False)
            bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id,reply_markup=relationShip_kb(me,uid))
        elif func == 'delfriend':
            status = del_friend(me,uid)
            if status == 201:
                bot.answer_callback_query(callback_query_id=call.id, text="–î—Ä—É–≥ —É–¥–∞–ª–µ–Ω", show_alert=False)
            bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id,reply_markup=relationShip_kb(me,uid))
        elif func == 'delenemy':
            status = del_enemy(me,uid)
            if status == 301:
                bot.answer_callback_query(callback_query_id=call.id, text="–£–±—Ä–∞–Ω –∏–∑ –ß–°", show_alert=False)
            bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id,reply_markup=relationShip_kb(me,uid))


    if call.data.split()[0] == 'casino':
        uid = call.message.chat.id
        data = get_data_from_bd_by_id(uid)
        gametype = call.data.split()[1]
        if gametype == 'monetka':
            if call.data.split()[2] == 'bet':
                bet = int(call.data.split()[3])
                if bet > data[5]:
                    bot.edit_message_text(chat_id=uid, message_id=call.message.message_id, text='–ù–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –±–∞–ª–∞–Ω—Å')
                else:
                    bot.edit_message_text(chat_id=uid, message_id=call.message.message_id, text="–ê —Ç–µ–ø–µ—Ä—å —Å—Ç–æ—Ä–æ–Ω—É...", reply_markup=casinoMonetkaSide_kb(bet))
            else:
                bet = int(call.data.split()[2])
                side = call.data.split()[3]
                rnd = random.randint(0,1)
                sides = ['orel','reshka']
                if sides[rnd] == side:
                    bot.edit_message_text(chat_id=uid, message_id=call.message.message_id, text='–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ '+str(bet)+' RPCoin\n–í–∞—à –±–∞–ª–∞–Ω—Å: '+str(data[5]+bet))
                    update_mon_bd(get_uname_by_id(uid),data[5]+bet)
                else:
                    bot.edit_message_text(chat_id=uid, message_id=call.message.message_id, text='–£–≤—ã –∏ –∞—Ö. –í—ã –ø–æ—Ç–µ—Ä—è–ª–∏ '+str(bet)+' RPCoin\n–í–∞—à –±–∞–ª–∞–Ω—Å: '+str(data[5]-bet))
                    update_mon_bd(get_uname_by_id(uid),data[5]-bet)
        if gametype == 'kosti':
            if call.data.split()[2] == 'bet':
                global kosti_sides, kosti_bet
                kosti_sides = []
                kosti_bet = 0
                if int(call.data.split()[3]) > data[5]:
                    bot.edit_message_text(chat_id=uid, message_id=call.message.message_id, text='–ù–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –±–∞–ª–∞–Ω—Å')
                else:
                    kosti_bet = int(call.data.split()[3])
                    bot.edit_message_text(chat_id=uid, message_id=call.message.message_id, text='–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞: '+str(kosti_bet), reply_markup=casinoKostiSide_kb())
            if call.data.split()[2] == 'side':
                if call.data.split()[3] in kosti_sides:
                    kosti_sides.remove(call.data.split()[3])
                else:
                    kosti_sides.append(call.data.split()[3])
                kst = ''
                for i in kosti_sides:
                    kst += str(i)+' '
                bot.edit_message_text(chat_id=uid, message_id=call.message.message_id, text='–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞: '+str(kosti_bet)+'\n–í–∞—à–∏ –ø–æ–∑–∏—Ü–∏–∏: '+kst, reply_markup=casinoKostiSide_kb())
            if call.data.split()[2] == 'ok':
                if len(kosti_sides) == 0:
                    bot.answer_callback_query(callback_query_id=call.id, text="–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –ø–æ–∑–∏—Ü–∏—é", show_alert=True)
                else:
                    rnd = str(random.randint(1,6))
                    if rnd in kosti_sides:
                        mn = 6 / len(kosti_sides)
                        bot.edit_message_text(chat_id=uid, message_id=call.message.message_id, text='–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏: '+str(round(int(kosti_bet)*mn))+' RPCoin\n–í–∞—à –±–∞–ª–∞–Ω—Å: '+str(data[5]+(round(int(kosti_bet)*mn)-kosti_bet)))
                        update_mon_bd(get_uname_by_id(uid),data[5]+(round(int(kosti_bet)*mn)-kosti_bet))
                    else:
                        bot.edit_message_text(chat_id=uid, message_id=call.message.message_id, text='–í—ã –ø–æ—Ç–µ—Ä—è–ª–∏: '+str(kosti_bet)+' RPCoin\n–í–∞—à –±–∞–ª–∞–Ω—Å: '+str(data[5]-kosti_bet))
                        update_mon_bd(get_uname_by_id(uid),data[5]-kosti_bet)
    if call.data.split()[0] == 'management':
        mdata = get_data_from_management(call.message.chat.id)
        data = get_data_from_bd_by_id(call.message.chat.id)
        date_now = datetime.datetime.now().date()
        datedelta = date_now - string_to_date(mdata[3])
        income_money = int(datedelta.days) * int(mdata[2])
        func = call.data.split()[1]
        if len(call.data.split()) > 2:
            func2 = call.data.split()[2]
        if func == 'prize':
            update_prize_date(call.message.chat.id,date_to_string(date_now))
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–ü—Ä–∏–∑ –ø–æ–ª—É—á–µ–Ω!')
            update_mon_bd(data[1],int(data[5])+25)
        else:
            if func == 'get':
                if func2 == 'income':
                    if mdata[2] != '0':
                        update_mon_bd_by_id(call.message.chat.id,str(int(data[5])+income_money))
                        update_business_date(call.message.chat.id,date_to_string(date_now))
                        if int(datedelta.days) == 0:
                            bot.answer_callback_query(callback_query_id=call.id, text="–í—ã —É–∂–µ —Å–æ–±–∏—Ä–∞–ª–∏ —Å–µ–≥–æ–¥–Ω—è –¥–æ—Ö–æ–¥", show_alert=True)
                        else:
                            bot.answer_callback_query(callback_query_id=call.id, text="–î–æ—Ö–æ–¥: "+str(income_money)+' RPCoin –∑–∞ '+str(datedelta.days)+' –¥–Ω–µ–π', show_alert=True)
                            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–ë–∞–ª–∞–Ω—Å: '+str(int(data[5])+int(income_money))+' RPC\n–î–µ–Ω–µ–≥ –Ω–æ–∫–æ–ø–∏–ª–æ—Å—å: '+str('0')+' RPC\n–ü–∞—Å—Å–∏–≤–Ω—ã–π –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –¥–æ—Ö–æ–¥: '+str(mdata[2])+' RPC',reply_markup=management_kb())
                    else: 
                        bot.answer_callback_query(callback_query_id=call.id, text="–ù–µ—Ç –ø–∞—Å—Å–∏–≤–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞", show_alert=True)
                elif func2 == 'business':
                    bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id,reply_markup=management_buy_kb())
            if func == 'buy':
                if not(func2 == 'back'):
                    cost = int(func2)
                    if data[5] >= cost*business_cost_factor:
                        busiList = mdata[4]
                        busiList_new = ''
                        for i in busiList.split():
                            j = i.split('-')
                            if int(j[0]) == int(cost):
                                j[1] = str(int(j[1]) + 1)
                            busiList_new += str(j[0])+'-'+str(j[1])+' '
                        update_business(call.message.chat.id, busiList_new)
                        income_new = int(mdata[2])+int(cost)
                        update_income(call.message.chat.id, str(income_new))
                        update_mon_bd_by_id(call.message.chat.id, str(int(data[5])-int(cost)*business_cost_factor))
                        bot.answer_callback_query(callback_query_id=call.id, text="–í—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ –±–∏–∑–Ω–µ—Å", show_alert=False)
                        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–ë–∞–ª–∞–Ω—Å: '+str(data[5])+'\n–î–µ–Ω–µ–≥ –Ω–æ–∫–æ–ø–∏–ª–æ—Å—å: '+str(income_money)+'\n–ü–∞—Å—Å–∏–≤–Ω—ã–π –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –¥–æ—Ö–æ–¥: '+str(income_new),reply_markup=management_buy_kb())
                    else:
                        bot.answer_callback_query(callback_query_id=call.id, text="–ù–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –í–∞—à –±–∞–ª–∞–Ω—Å: "+str(data[5]), show_alert=True)
                else:
                    bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id,reply_markup=management_kb())
# /–ö–û–õ–ë–ï–ö–ò  




# –ò–ì–†–ê
@bot.message_handler(commands=['game'])
def mainMenu(message):
    error = 0
    try:
        data = get_data_from_bd_by_id(message.from_user.id)
    except:
        bot.send_message(message.from_user.id,'–£ —Ç–µ–±—è –∫–∞–∂–µ—Ç—Å—è –Ω–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.\n–í–≤–µ–¥–∏ /start')
        error = 1
    if error == 0:
        global personId,personUname,personName,personAge,personDes,personMon,personLoc
        updateGlobalVars(message.from_user.id)

        if personLoc != 0:
            personsId = get_persons_in_loc_bd(personLoc)
            for i in range(len(personsId)):
                if int(personsId[i][0]) == int(personId):
                    continue
                try:
                    bot.send_message(personsId[i][0],'<i>'+personName+" –ø–æ–∫–∏–Ω—É–ª –ª–æ–∫–∞—Ü–∏—é</i>", parse_mode="HTML")
                except:
                    print(str(personsId[i][0])+"bot was blocked by that user 182")
            update_loc_bd(message.from_user.id, "0")
            personLoc = 0
        bot.send_message(message.from_user.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=mainMenu_kb())

# @bot.message_handler(content_types=['text'])
# def mainMenuHandler(message):
    
        # mainMenu(message)
# /–ò–ì–†–ê



# –ü–†–û–§–ò–õ–¨
def viewPerson(message, user_id=0):
    data = get_data_from_bd_by_uname(message)
    if data == 0:
        bot.send_message(user_id, '–¢–∞–∫–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö')
    else:
        if data[0] == user_id:
            bot.send_message(user_id, '–í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å —Å –ø–æ–º–æ—â—å—é –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é "–ü—Ä–æ—Ñ–∏–ª—å" –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é')
        else:
            bot.send_message(user_id, 'Username: <code>' + data[1] + '</code>\n–ò–º—è: '+data[2] + '\n–í–æ–∑—Ä–∞—Å—Ç: '+str(data[3]) + '\n–û–ø–∏—Å–∞–Ω–∏–µ: '+data[4],parse_mode="HTML",reply_markup = relationShip_kb(user_id, str(data[0])))

def profileRegHandler(message):
    if message.text == '–ù–∞–∑–∞–¥':
        mainMenu(message)
    elif message.text == '–ò–º—è –∏ –§–∞–º–∏–ª–∏—é':
        msg = bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è: ")
        bot.register_next_step_handler(msg, changeName)
    elif message.text == 'Username':
        msg = bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π username: ")
        bot.register_next_step_handler(msg, changeUname)
    elif message.text == '–í–æ–∑—Ä–∞—Å—Ç':
        msg = bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≤–æ–∑—Ä–∞—Å—Ç: ")
        bot.register_next_step_handler(msg, changeAge)
    elif message.text == '–û–ø–∏—Å–∞–Ω–∏–µ':
        msg = bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: ")
        bot.register_next_step_handler(msg, changeDes)
    else:
        msg = bot.send_message(message.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é!")
        bot.register_next_step_handler(msg, profileRegHandler)
def changeName(message):
    val = message.text
    usid = message.from_user.id
    try:
        conn = sqlite3.connect(dbAddress)
        cursor = conn.cursor()
        data = [(val, usid)]
        sql = """UPDATE persons 
                SET fio = ?
                WHERE id = ?"""
        cursor.executemany(sql, data)
        conn.commit()
        conn.close()
        bot.send_message(message.from_user.id, "–ò–º—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ")
    except:
        bot.send_message(message.from_user.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!")
    mainMenu(message)
def changeUname(message):
    val = message.text
    usid = message.from_user.id
    if len(val) <= minUnameLen:
        bot.send_message(message.from_user.id, "–¢–≤–æ–π username –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ "+str(minUnameLen)+"—Ö —Å–∏–º–≤–æ–ª–æ–≤. –ü—Ä–∏–¥—É–º–∞–π –¥—Ä—É–≥–æ–π —Å–æ–æ—Ç–≤–µ—Ç—Å–≤—É—é—â–∏–π –ø—Ä–∞–≤–∏–ª–∞–º")
        bot.register_next_step_handler(message, changeUname)
    else:
        unameStatus = True
        for sim in val:
            if not(sim in trueSimInUname):
                unameStatus = False
        if val[0] in '1234567890':
            unameStatus = False
        try:
            if unameStatus:
                conn = sqlite3.connect(dbAddress)
                cursor = conn.cursor()
                data = [(val, usid)]
                sql = """UPDATE persons 
                        SET uname = ?
                        WHERE id = ?"""
                cursor.executemany(sql, data)
                sql = """UPDATE relationship
                        SET uname = ?
                        WHERE id = ?"""
                cursor.executemany(sql, data)
                conn.commit()
                conn.close()
                bot.send_message(message.from_user.id, "Username —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω")
                mainMenu(message)
            else:
                bot.send_message(message.from_user.id, "–í username –ø—Ä–∏—Å—É—Ç—Å–≤—É—é—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –∏–ª–∏ –æ–Ω –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —Ü–∏—Ñ—Ä—ã. –ü—Ä–∏–¥—É–º–∞–π –¥—Ä—É–≥–æ–π —Å–æ–æ—Ç–≤–µ—Ç—Å–≤—É—é—â–∏–π –ø—Ä–∞–≤–∏–ª–∞–º")
                bot.register_next_step_handler(message, changeUname)
        except:
            bot.send_message(message.from_user.id, "–¢–∞–∫–æ–π username —É–∂–µ –∑–∞–Ω—è—Ç!")
            bot.register_next_step_handler(message, changeUname)
def changeAge(message):
    val = message.text
    usid = message.from_user.id
    try:
        conn = sqlite3.connect(dbAddress)
        cursor = conn.cursor()
        data = [(val, usid)]
        sql = """UPDATE persons 
                SET age = ?
                WHERE id = ?"""
        cursor.executemany(sql, data)
        conn.commit()
        conn.close()
        bot.send_message(message.from_user.id, "–í–æ–∑—Ä–∞—Å—Ç —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω")
    except:
        bot.send_message(message.from_user.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!")
    mainMenu(message)
def changeDes(message):
    val = message.text
    usid = message.from_user.id
    try:
        conn = sqlite3.connect(dbAddress)
        cursor = conn.cursor()
        data = [(val, usid)]
        sql = """UPDATE persons 
                SET des = ?
                WHERE id = ?"""
        cursor.executemany(sql, data)
        conn.commit()
        conn.close()
        bot.send_message(message.from_user.id, "–û–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ")
    except:
        bot.send_message(message.from_user.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!")
    mainMenu(message)
# /–ü–†–û–§–ò–õ–¨




# –õ–û–ö–ê–¶–ò–ò
def locationHandler(message):
    if message.text == locationlist[0][2]:
        mainMenu(message)
    elif message.text[len(message.text)-1:] == not_available_emoji:
        bot.send_message(message.from_user.id, '–õ–æ–∫–∞—Ü–∏—è '+message.text[0:len(message.text)-1]+' –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤–∞–º –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç')
        mainMenu(message)
    elif message.text == locationlist[0][0]:
        bot.send_message(message.from_user.id, "–õ–æ–∫–∞—Ü–∏—è: "+locationlist[0][0]+"\n", reply_markup=chat_kb())
        update_loc_bd(message.from_user.id, message.from_user.id)
        personsId = get_persons_in_loc_bd(message.from_user.id)
        for i in range(len(personsId)):
            if personsId[i][0] == personId:
                continue
            bot.send_message(personsId[i][0],'<u>'+personName+" –ø—Ä–∏—à–µ–ª –¥–æ–º–æ–π</u>", parse_mode="HTML")
    elif message.text == locationlist[0][1]:
        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add('–ù–∞–∑–∞–¥')
        msg = bot.send_message(message.from_user.id, "–í–ø–∏—à–∏—Ç–µ username –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∫ –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–π—Ç–∏ –≤ –≥–æ—Å—Ç–∏", reply_markup=markup)
        bot.register_next_step_handler(msg, visitsHandler)
    elif message.text == locationlist[1][0]: 
        bot.send_message(message.from_user.id, "–õ–æ–∫–∞—Ü–∏—è: –£–ª–∏—Ü–∞\n–ë–æ–ª—å—à–∞—è —à–∏—Ä–æ–∫–∞—è —É–ª–∏—Ü–∞ –∫–∏—à–∞—â–∞—è —Ç–æ–ª–ø–∞–º–∏ –ª—é–¥–µ–π –∫–æ—Ç–æ—Ä—ã–µ –≤–µ—á–Ω–æ –∫—É–¥–∞-—Ç–æ —Å–ø–µ—à–∞—Ç", reply_markup=chat_kb())
        update_loc_bd(message.from_user.id, "2")
        personsId = get_persons_in_loc_bd(2)
        for i in range(len(personsId)):
            if personsId[i][0] == personId:
                continue
            bot.send_message(personsId[i][0],'<i>'+personName+' –≤–æ—à–µ–ª –≤ –ª–æ–∫–∞—Ü–∏—é "–£–ª–∏—Ü–∞"</i>', parse_mode="HTML")
    elif message.text == locationlist[1][1]:
        bot.send_message(message.from_user.id, "–õ–æ–∫–∞—Ü–∏—è: –ü–∞—Ä–∫\n–î–æ–≤–æ–ª—å–Ω–æ —Å–ø–æ–∫–æ–π–Ω–æ–µ –º–µ—Å—Ç–æ, –≤ —Å–∞–º—ã–π —Ä–∞–∑ —á—Ç–æ–±—ã –æ—Ç–¥–æ—Ö–Ω—É—Ç—å –æ—Ç –≥–æ—Ä–æ–¥—Å–∫–æ–π —Å—É–µ—Ç—ã", reply_markup=chat_kb())
        update_loc_bd(message.from_user.id, "3")
        personsId = get_persons_in_loc_bd(3)
        for i in range(len(personsId)):
            if personsId[i][0] == personId:
                continue
            bot.send_message(personsId[i][0],'<i>'+personName+' –≤–æ—à–µ–ª –≤ –ª–æ–∫–∞—Ü–∏—é "–ü–∞—Ä–∫" </i>',parse_mode="HTML")
    elif message.text == locationlist[1][2]:
        bot.send_message(message.from_user.id, "–õ–æ–∫–∞—Ü–∏—è: –ö–∞—Ñ–µ\n–ù–µ–±–æ–ª—å—à–æ–µ –∫–∞—Ñ–µ –Ω–∞—Ö–æ–¥—è—â–µ–µ—Å—è –Ω–µ–¥–∞–ª–µ–∫–æ –æ—Ç –≤–∞—à–µ–≥–æ –¥–æ–º–∞. –ù–∏ —á–µ–º –Ω–µ –ø—Ä–∏–º–µ—Ç–Ω–∞—è, –Ω–æ —Ç–∞–∫–∞—è —É—é—Ç–Ω–∞—è", reply_markup=chat_kb())
        update_loc_bd(message.from_user.id, "4")
        personsId = get_persons_in_loc_bd(4)
        for i in range(len(personsId)):
            if personsId[i][0] == personId:
                continue
            bot.send_message(personsId[i][0],'<i>'+personName+' –≤–æ—à–µ–ª –≤ –ª–æ–∫–∞—Ü–∏—é "–ö–∞—Ñ–µ"</i>', parse_mode="HTML")
    elif message.text == locationlist[2][1]:
        bot.send_message(message.from_user.id, "–õ–æ–∫–∞—Ü–∏—è: –ö–ª—É–±\n–° —Å–∞–º–æ–≥–æ –≤—Ö–æ–¥–∞ —Å–ª—ã—à–Ω–æ –º—É–∑—ã–∫—É –∫–æ—Ç–æ—Ä–∞—è —Ç–∞–∫ –∏ —Ç—è–Ω–µ—Ç —Ç–∞–Ω—Ü–µ–≤–∞—Ç—å!", reply_markup=chat_kb())
        update_loc_bd(message.from_user.id, "5")
        personsId = get_persons_in_loc_bd(5)
        for i in range(len(personsId)):
            if personsId[i][0] == personId:
                continue
            bot.send_message(personsId[i][0],'<i>'+personName+' –≤–æ—à–µ–ª –≤ –ª–æ–∫–∞—Ü–∏—é "–ö–ª—É–±"</i>', parse_mode="HTML")
    elif message.text == locationlist[2][0]:
        bot.send_message(message.from_user.id, "–õ–æ–∫–∞—Ü–∏—è: –®–∫–æ–ª–∞\n–ó–Ω–∞–Ω–∏—è - —Å–∏–ª–∞!", reply_markup=chat_kb())
        update_loc_bd(message.from_user.id, "6")
        personsId = get_persons_in_loc_bd(6)
        for i in range(len(personsId)):
            if personsId[i][0] == personId:
                continue
            bot.send_message(personsId[i][0],'<i>'+personName+' –≤–æ—à–µ–ª –≤ –ª–æ–∫–∞—Ü–∏—é "–®–∫–æ–ª–∞"</i>', parse_mode="HTML")
    elif message.text == locationlist[2][2]:
        bot.send_message(message.from_user.id, "–õ–æ–∫–∞—Ü–∏—è: –ö–∞–∑–∏–Ω–æ\n–£–º–µ–π –≤–æ –≤—Ä–µ–º—è –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è!", reply_markup=chat_kb())
        update_loc_bd(message.from_user.id, "7")
        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add('!–ø–æ–º–æ—â—å','!–ª–æ–∫–∞—Ü–∏–∏','!–º–µ–Ω—é')
        markup.add('!–º–æ–Ω–µ—Ç–∫–∞','!–∫–æ—Å—Ç–∏')
        bot.send_message(message.from_user.id, "!–º–æ–Ω–µ—Ç–∫–∞ - –æ–±—ã—á–Ω–∞—è –∏–≥—Ä–∞ —Å —à–∞–Ω—Å–æ–º 50%\n!–∫–æ—Å—Ç–∏ - —à–∞–Ω—Å –≤—ã–∏–≥—Ä–∞—Ç—å 1 –∫ 6, –Ω–æ –∏ –ø—Ä–∏–∑ –±—É–¥–µ—Ç —Å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–º 6—Ö", reply_markup=markup)
    else:
        msg = bot.send_message(message.from_user.id, "–ù–∞–∂–º–∏ –Ω–∞ –ø—É–Ω–∫—Ç –º–µ–Ω—é!")
        bot.register_next_step_handler(msg, locationHandler)
def visitsHandler(message):
    if personUname == message.text:
        bot.send_message(message.from_user.id, '–î–æ–º–æ–π –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø–∞—Å—Ç—å —Å –ø–æ–º–æ—â—å—é –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é "–î–æ–º" –≤ –º–µ–Ω—é –ª–æ–∫–∞—Ü–∏–π')
        mainMenu(message)
    elif message.text == '–ù–∞–∑–∞–¥':
        mainMenu(message)
    else:
        try:
            data = get_data_from_bd_by_uname(message.text)
            friends, enemies = get_friends_and_enemies_list(message.text)
        except:
            bot.send_message(message.from_user.id, "–¢–∞–∫–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –Ω–µ—Ç –≤ –Ω–∞—à–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–æ–≥–æ username")
            mainMenu(message)
        
        if not(personUname in enemies):
            if personUname in friends:
                update_loc_bd(message.from_user.id, data[0])
                bot.send_message(message.from_user.id, "–õ–æ–∫–∞—Ü–∏—è: –î–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "+data[2],reply_markup=chat_kb())
                bot.send_message(data[0], '–ü–µ—Ä—Å–æ–Ω–∞–∂ ['+personUname+'] '+personName+' –ø—Ä–∏—à–µ–ª –∫ –≤–∞–º –¥–æ–º–æ–π',reply_markup=chat_kb())
            else:
                bot.send_message(message.from_user.id, "–í–∞—Å –Ω–µ—Ç –≤ –¥—Ä—É–∑—å—è—Ö —É –¥–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞")
                mainMenu(message)
        else:
            bot.send_message(message.from_user.id, "–í—ã –≤ –ß–° —É –¥–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞")
            mainMenu(message)
# /–õ–û–ö–ê–¶–ò–ò





@bot.message_handler(content_types=['text'])
def messagesHandler(message):
    error = 0
    try:
        data = get_data_from_bd_by_id(message.from_user.id)
    except:
        bot.send_message(message.from_user.id,'–£ —Ç–µ–±—è –∫–∞–∂–µ—Ç—Å—è –Ω–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.\n–í–≤–µ–¥–∏ /start')
        error = 1
    if error == 0:
        global personId,personUname,personName,personAge,personDes,personMon,personLoc, locationlist
        updateGlobalVars(message.from_user.id)
        
        if message.text == '–ù–∞–∑–∞–¥‚Ü©Ô∏è':
            mainMenu(message)
        elif message.text == '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å‚öôÔ∏è':
            markup = ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add('–ò–º—è –∏ –§–∞–º–∏–ª–∏—é', 'Username', '–í–æ–∑—Ä–∞—Å—Ç', '–û–ø–∏—Å–∞–Ω–∏–µ', '–ù–∞–∑–∞–¥')
            msg = bot.send_message(message.from_user.id, "–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å?", reply_markup=markup)
            bot.register_next_step_handler(msg, profileRegHandler)
        elif message.text == '–î—Ä—É–∑—å—è –∏ –ß–°üë•':
            friends, enemies = get_friends_and_enemies_list(personUname)
            friendslist = ''
            enemieslist = ''
            for i in friends.split():
                data = get_data_from_bd_by_uname(i)
                friendslist += '<a href="t.me/SmrkRP_bot?start=viewPerson-'+data[1]+'">['+data[1]+'] '+data[2]+'</a>\n'
            for i in enemies.split():
                data = get_data_from_bd_by_uname(i)
                enemieslist += '<a href="t.me/SmrkRP_bot?start=viewPerson-'+data[1]+'">['+data[1]+'] '+data[2]+'</a>'
            bot.send_message(message.from_user.id, "–î—Ä—É–∑—å—è:\n"+friendslist, parse_mode="HTML",disable_web_page_preview = True)
            bot.send_message(message.from_user.id, "–í —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ:\n"+enemieslist, parse_mode="HTML",disable_web_page_preview = True, reply_markup=chat_kb())


        elif message.text == '–ü—Ä–æ—Ñ–∏–ª—åüë§':
            markup = ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add('–î—Ä—É–∑—å—è –∏ –ß–°üë•', '–ù–∞–∑–∞–¥‚Ü©Ô∏è')
            markup.add('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å‚öôÔ∏è')
            bot.send_message(message.from_user.id, "\nUsername: <code>"+personUname+"</code>\n–ò–º—è: "+personName+"\n–í–æ–∑—Ä–∞—Å—Ç: "+str(personAge)+"\n–ë–∞–ª–∞–Ω—Å: "+str(personMon)+"\n–û–ø–∏—Å–∞–Ω–∏–µ: "+personDes, parse_mode="HTML",reply_markup=markup)
            # bot.register_next_step_handler(msg, profileHandler)
        elif message.text == '–õ–æ–∫–∞—Ü–∏–∏üìç' or message.text.lower() == '!–ª–æ–∫–∞—Ü–∏–∏':
            if personLoc != 0:
                personsId = get_persons_in_loc_bd(personLoc)
                for i in range(len(personsId)):
                    if int(personsId[i][0]) == int(personId):
                        continue
                    try:
                        bot.send_message(personsId[i][0],'<i>'+personName+" –ø–æ–∫–∏–Ω—É–ª –ª–æ–∫–∞—Ü–∏—é</i>", parse_mode="HTML")
                    except:
                        print(str(personsId[i][0])+"bot was blocked by that user 313")
                update_loc_bd(message.from_user.id, "0")
                personLoc = 0
            markup = ReplyKeyboardMarkup(resize_keyboard=True)
            time_now = datetime.datetime.now().time()
            locationlist = [['–î–æ–ºüè†', '–í –≥–æ—Å—Ç–∏üèò','–ù–∞–∑–∞–¥‚Ü©Ô∏è'],['–£–ª–∏—Ü–∞üöô', '–ü–∞—Ä–∫üèû', '–ö–∞—Ñ–µ‚òïÔ∏è'],['–®–∫–æ–ª–∞‚úçÔ∏è','–ö–ª—É–±üåÉ','–ö–∞–∑–∏–Ω–æüí∏']]
            if not((6 < int(personAge) <= 18) and ((schoolopen<=time_now) and (schoolclose>time_now))):
                locationlist[2][0] = locationlist[2][0][0:len(locationlist[2][0])-2] + not_available_emoji
            if not((18 <= int(personAge)) and ((clubopen<=time_now) and (clubclose>time_now))):
                locationlist[2][1] = locationlist[2][1][0:len(locationlist[2][1])-1] + not_available_emoji
            if not(18 <= int(personAge)):
                locationlist[2][2] = locationlist[2][2][0:len(locationlist[2][2])-1] + not_available_emoji
            for i in range(len(locationlist)):
                if len(locationlist[i]) == 3:
                    markup.add(locationlist[i][0],locationlist[i][1],locationlist[i][2])
                if len(locationlist[i]) == 2:
                    markup.add(locationlist[i][0],locationlist[i][1])
                if len(locationlist[i]) == 1:
                    markup.add(locationlist[i][0])
            msg = bot.send_message(message.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é", reply_markup=markup)
            bot.register_next_step_handler(msg, locationHandler)
        elif message.text == '–ü–∞–Ω–µ–ª—å –∑–∞—Ä–∞–±–æ—Ç–∫–∞üßÆ':
            date_now = datetime.datetime.now().date()
            date = date_now - datetime.timedelta(1)
            try:
                mdata = get_data_from_management(personId)
            except:
                businessStr = ''
                for i in businessList:
                    businessStr += str(i[1])+'-0 '
                insert_new_person_in_management(personId,date_to_string(date), businessStr)
            mdata = get_data_from_management(personId)
            data = get_data_from_bd_by_id(personId)
            datedelta = date_now - string_to_date(mdata[1])
            datedeltafinc = date_now - string_to_date(mdata[3])
            income_money = int(datedeltafinc.days) * int(mdata[2])
            if datedelta.days >= 1:
                bot.send_message(personId,'–í–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø—Ä–∏–∑ —Ä–∞–∑–º–µ—Ä–æ–º –≤ 25 RPCoin!', reply_markup=everydayPrize_kb())
            bot.send_message(personId,'–ë–∞–ª–∞–Ω—Å: '+str(data[5])+'\n–î–µ–Ω–µ–≥ –Ω–æ–∫–æ–ø–∏–ª–æ—Å—å: '+str(income_money)+'\n–ü–∞—Å—Å–∏–≤–Ω—ã–π –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –¥–æ—Ö–æ–¥: '+str(mdata[2]),reply_markup=management_kb())
        
        # –ß–ê–¢–´
        elif message.text[0] == '!':
            splitMessage = message.text.split()
            if message.text.lower() == '!–º–µ–Ω—é':
                mainMenu(message)
            elif splitMessage[0].lower() == '!–ø–µ—Ä–µ–¥–∞—Ç—å':
                i = True
                try:
                    int(splitMessage[2])
                except:
                    i = False
                if (len(splitMessage) <= 2) or (i == False):
                    bot.send_message(personId,'–§–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ –∫–æ–º–∞–Ω–¥—ã: !–ü–µ—Ä–µ–¥–∞—Ç—å [username –∞–¥—Ä–µ—Å–∞—Ç–∞] [—Å—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞]')
                else:
                    if int(splitMessage[2]) <= 0:
                        bot.send_message(personId,'–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É')
                    else:
                        if splitMessage[1] == personUname:
                            bot.send_message(personId,'–°–∞–º–æ–º—É —Å–µ–±–µ –¥–µ–Ω—å–≥–∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –Ω–µ—Ç —Å–º—ã—Å–ª–∞!')
                        else:
                            clientdata = get_data_from_bd_by_uname(splitMessage[1])
                            if int(personMon)-int(splitMessage[2])>0:
                                update_mon_bd(splitMessage[1], int(clientdata[5])+int(splitMessage[2]))
                                update_mon_bd(personUname, int(personMon)-int(splitMessage[2]))
                                bot.send_message(personId,'<i>–í—ã –ø–µ—Ä–µ–≤–µ–ª–∏ –¥–µ–Ω—å–≥–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂—É '+clientdata[1]+' –Ω–∞ —Å—É–º–º—É '+splitMessage[2]+'</i>',parse_mode="HTML")
                                bot.send_message(get_id_by_uname(splitMessage[1]),'<i>–ü–µ—Ä—Å–æ–Ω–∞–∂ '+personName+' –ø–µ—Ä–µ–≤–µ–ª –≤–∞–º '+splitMessage[2]+' RPCoin</i>',parse_mode="HTML")
                            else:
                                bot.send_message(personId,'–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–µ–Ω–µ–≥')
            elif message.text.lower() == '!–±–∞–ª–∞–Ω—Å':
                bot.send_message(personId,'–í–∞—à –±–∞–ª–∞–Ω—Å: '+str(personMon)+' RPCoin')
            elif message.text.lower() == '!–∫—Ç–æ–∑–¥–µ—Å—å':
                personsId = get_persons_in_loc_bd(personLoc)
                personlist = ''
                for i in personsId:
                    personlist += '<a href="t.me/SmrkRP_bot?start=viewPerson-'+i[1]+'">'+i[2]+'</a>\n'
                bot.send_message(personId,'–í –ª–æ–∫–∞—Ü–∏–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è: \n'+personlist, parse_mode="HTML",disable_web_page_preview = True)
            elif message.text.lower() == '!–≤—Ä–µ–º—è':
                time_now = datetime.datetime.now().time()
                bot.send_message(personId,'–í—Ä–µ–º—è: '+time_now.strftime('%H:%M'))
            elif splitMessage[0].lower() == '!–∫—É–ø–∏—Ç—å':
                if personLoc in [2,3,4]:
                    if (len(splitMessage) == 1):
                        bot.send_message(personId,'–§–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ –∫–æ–º–∞–Ω–¥—ã: !–ö—É–ø–∏—Ç—å [–≤–∏–¥ —Ç–æ–≤–∞—Ä–∞]')
                        bot.send_message(personId,'–í–∏–¥—ã —Ç–æ–≤–∞—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –≤ –¥–∞–Ω–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏')
                        bot.send_message(personId,getProductsList(productsList[personLoc]))
                    else:
                        product = splitMessage[1]
                        price = getProductsPrice(productsList[personLoc],product)
                        if price == 0:
                            bot.send_message(personId,'–¢–∞–∫–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç(–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞–ø–∏—Å–∞–Ω–∏—è –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞)')
                        else:
                            if int(personMon)-int(price)>0:
                                update_mon_bd(personId, int(personMon)-int(price))
                                bot.send_message(personId,'–í—ã –∫—É–ø–∏–ª–∏ '+product+' –Ω–∞ —Å—É–º–º—É '+str(price))
                            else:
                                bot.send_message(splitMessage[1],'–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–µ–Ω–µ–≥')
                else:
                    bot.send_message(personId,'–í –¥–∞–Ω–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏ —ç—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞!')
            elif splitMessage[0].lower() == '!–ø—Ä–æ—Ñ–∏–ª—å':
                if len(splitMessage) < 2:
                    bot.send_message(personId,'–§–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ –∫–æ–º–∞–Ω–¥—ã: \n!–ü—Ä–æ—Ñ–∏–ª—å [username]')
                else:
                    viewPerson(splitMessage[1],personId)

            elif (splitMessage[0].lower() == '!—Å–∞–¥') and (personLoc == personId):
                try: 
                    gdata = get_data_from_gardening(personId)
                except:
                    insert_new_person_in_gardening(personId,'0-0 0-0 0-0 0-0 0-0 0-0 0-0 0-0 0-0 0-0 0-0 0-0 0-0 0-0 0-0 ', date_to_string(datetime.datetime.now().date()))
                    gdata = get_data_from_gardening(personId)
                last_watering =  datetime.datetime.now().date() - string_to_date(gdata[2])
                print(last_watering.days)
                if int(last_watering.days) > 1:
                    update_garden(personId,'0-0 0-0 0-0 0-0 0-0 0-0 0-0 0-0 0-0 0-0 0-0 0-0 0-0 0-0 0-0 ')
                    gdata = get_data_from_gardening(personId)
                    bot.send_message(personId,'–í—ã –Ω–µ –ø–æ–ª–∏–≤–∞–ª–∏ —Å–∞–¥ –±–æ–ª–µ–µ 1 –¥–Ω—è –ø–æ—ç—Ç–æ–º—É –≤–µ—Å—å —É—Ä–æ–∂–∞–π –≤—ã—Å–æ—Ö!',reply_markup=garden_kb(gdata[1]))
                else:
                    bot.send_message(personId,'–ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ–ª–∏–≤: '+gdata[2],reply_markup=garden_kb(gdata[1]))

            elif message.text.lower() == '!–ø–æ–º–æ—â—å':
                bot.send_message(personId,"""
<code>!–º–µ–Ω—é</code> - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–∞—Å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n
<code>!–ø–µ—Ä–µ–¥–∞—Ç—å</code> [username] [—Å—É–º–º–∞] - –ø–µ—Ä–µ–¥–∞–µ—Ç –¥–µ–Ω—å–≥–∏ –¥—Ä—É–≥–æ–º—É –ø–µ—Ä—Å–æ–Ω–∞–∂—É\n
<code>!–±–∞–ª–∞–Ω—Å</code> - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∞—à –±–∞–ª–∞–Ω—Å\n
<code>!–∫—Ç–æ–∑–¥–µ—Å—å</code> - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –æ–¥–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏ —á—Ç–æ –∏ –≤—ã\n
<code>!–≤—Ä–µ–º—è</code> - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è\n
<code>!–ø—Ä–æ—Ñ–∏–ª—å</code> [username] - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.\n
<code>!–ø–æ–º–æ—â—å</code> - <tg-spoiler>–≤—ã–≤–æ–¥–∏—Ç –¥–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç</tg-spoiler>""",parse_mode="HTML")
# –∫–∞–∑–∏–Ω–æ
            elif message.text.lower() == '!–º–æ–Ω–µ—Ç–∫–∞':
                if personLoc == 7:
                    bot.send_message(message.from_user.id, "–í—ã–±–µ—Ä–∏ —Å—Ç–∞–≤–∫—É", reply_markup=casinoMonetkaBet_kb())
            elif message.text.lower() == '!–∫–æ—Å—Ç–∏':
                if personLoc == 7:
                    bot.send_message(message.from_user.id, "–í—ã–±–µ—Ä–∏ —Å—Ç–∞–≤–∫—É", reply_markup=casinoKostiBet_kb())
        elif int(personLoc) != 0:
            personsId = get_persons_in_loc_bd(personLoc)
            myfriends, myenemies = get_friends_and_enemies_list(personUname)
            for i in personsId:
                urfriends, urenemies = get_friends_and_enemies_list(i[1])
                if i[0] == personId:
                    continue
                if  personUname in urenemies:
                    bot.send_message(i[0],'<a href="t.me/SmrkRP_bot?start=viewPerson-'+personUname+'">'+personName+'(–ß–°)</a>: <tg-spoiler>'+message.text+'</tg-spoiler>', parse_mode="HTML",disable_web_page_preview = True)
                else:
                    if not(i[1] in myenemies):
                    #     bot.send_message(i[0],'<a href="t.me/SmrkRP_bot?start='+personUname+'"> –í—ã –Ω–µ –≤–∏–¥–∏—Ç–µ –¥–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Ç–æ–º—É —á—Ç–æ '+personName+' –¥–æ–±–∞–≤–∏–ª –≤–∞—Å –≤ –ß–°</a>', parse_mode="HTML",disable_web_page_preview = True)
                    # else:
                        try:
                            bot.send_message(i[0],'<b>'+'<a href="t.me/SmrkRP_bot?start=viewPerson-'+personUname+'">'+personName+'</a></b>: '+message.text, parse_mode="HTML",disable_web_page_preview = True)
                        except:
                            print(i[0],'–Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é')
        
# /–ß–ê–¢–´
